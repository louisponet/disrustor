error[E0277]: `Cell<RefOrInt>` cannot be shared between threads safely
  --> tests/cve/cve_2020_36470_2.rs:31:59
   |
31 |         let (_executor, producer) = DisrustorBuilder::new(provider_cloned)
   |                                     --------------------- ^^^^^^^^^^^^^^^ `Cell<RefOrInt>` cannot be shared between threads safely
   |                                     |
   |                                     required by a bound introduced by this call
   |
   = help: the trait `Sync` is not implemented for `Cell<RefOrInt>`
note: required by a bound in `DisrustorBuilder::new`
  --> src/dsl.rs
   |
   |         T: Send + Sync,
   |                   ^^^^ required by this bound in `DisrustorBuilder::new`

error[E0599]: the method `with_spin_wait` exists for struct `WithDataProvider<RingBuffer<Cell<RefOrInt>>, Cell<RefOrInt>>`, but its trait bounds were not satisfied
   --> tests/cve/cve_2020_36470_2.rs:32:14
    |
32  |               .with_spin_wait()
    |                ^^^^^^^^^^^^^^ method cannot be called on `WithDataProvider<RingBuffer<Cell<RefOrInt>>, Cell<RefOrInt>>` due to unsatisfied trait bounds
    |
   ::: src/ringbuffer.rs
    |
    |   pub struct RingBuffer<T> {
    |   ------------------------ doesn't satisfy `_: DataProvider<Cell<RefOrInt>>`
    |
    = note: the following trait bounds were not satisfied:
            `RingBuffer<Cell<RefOrInt>>: DataProvider<Cell<RefOrInt>>`
            `Cell<RefOrInt>: Sync`

error[E0277]: `Cell<RefOrInt>` cannot be shared between threads safely
  --> tests/cve/cve_2020_36470_2.rs:31:37
   |
31 |         let (_executor, producer) = DisrustorBuilder::new(provider_cloned)
   |                                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ `Cell<RefOrInt>` cannot be shared between threads safely
   |
   = help: the trait `Sync` is not implemented for `Cell<RefOrInt>`
note: required by a bound in `WithDataProvider`
  --> src/dsl.rs
   |
   |     T: Send + Sync,
   |               ^^^^ required by this bound in `WithDataProvider`

error[E0277]: `Cell<RefOrInt>` cannot be shared between threads safely
  --> tests/cve/cve_2020_36470_2.rs:44:55
   |
44 |     let (_executor, producer) = DisrustorBuilder::new(provider.clone())
   |                                 --------------------- ^^^^^^^^^^^^^^^^ `Cell<RefOrInt>` cannot be shared between threads safely
   |                                 |
   |                                 required by a bound introduced by this call
   |
   = help: the trait `Sync` is not implemented for `Cell<RefOrInt>`
note: required by a bound in `DisrustorBuilder::new`
  --> src/dsl.rs
   |
   |         T: Send + Sync,
   |                   ^^^^ required by this bound in `DisrustorBuilder::new`

error[E0599]: the method `with_spin_wait` exists for struct `WithDataProvider<RingBuffer<Cell<RefOrInt>>, Cell<RefOrInt>>`, but its trait bounds were not satisfied
   --> tests/cve/cve_2020_36470_2.rs:45:10
    |
45  |           .with_spin_wait()
    |            ^^^^^^^^^^^^^^ method cannot be called on `WithDataProvider<RingBuffer<Cell<RefOrInt>>, Cell<RefOrInt>>` due to unsatisfied trait bounds
    |
   ::: src/ringbuffer.rs
    |
    |   pub struct RingBuffer<T> {
    |   ------------------------ doesn't satisfy `_: DataProvider<Cell<RefOrInt>>`
    |
    = note: the following trait bounds were not satisfied:
            `RingBuffer<Cell<RefOrInt>>: DataProvider<Cell<RefOrInt>>`
            `Cell<RefOrInt>: Sync`

error[E0277]: `Cell<RefOrInt>` cannot be shared between threads safely
  --> tests/cve/cve_2020_36470_2.rs:44:33
   |
44 |     let (_executor, producer) = DisrustorBuilder::new(provider.clone())
   |                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ `Cell<RefOrInt>` cannot be shared between threads safely
   |
   = help: the trait `Sync` is not implemented for `Cell<RefOrInt>`
note: required by a bound in `WithDataProvider`
  --> src/dsl.rs
   |
   |     T: Send + Sync,
   |               ^^^^ required by this bound in `WithDataProvider`

warning: unused import: `disrustor::EventProducer`
 --> tests/cve/cve_2020_36470_2.rs:9:5
  |
9 | use disrustor::EventProducer;
  |     ^^^^^^^^^^^^^^^^^^^^^^^^
  |
  = note: `#[warn(unused_imports)]` on by default
